% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ch_input_time_compuound.R
\name{ch_input_time_compound}
\alias{ch_input_time_compound}
\title{Creates a collection of shiny objects to wrap a compound time-input.}
\usage{
ch_input_time_compound(id, label = "", step)
}
\arguments{
\item{id}{character, tag to prepend to the input and output id's}

\item{label}{character, label for the compound input}

\item{step}{numeric vector for the steps, (hours, minutes)}
}
\value{
list containing \code{ui_controller}, \code{ui_view}, and \code{server_model}
}
\description{
The list will contain:
}
\details{
\describe{
  \item{\code{ui_controller}}{\code{shiny::taglist} of ui elements for the controller}
  \item{\code{ui_view}}{\code{shing::taglist} of ui elements for the view}
  \item{\code{server_model}}{function with reactive code}
}

The list returned by this function has to be available to both the ui and the server.
If not using the \code{shinyApp} formulation, perhaps \code{global.R} could be useful.

The list \code{ui_controller} will have members:

\describe{
 \item{\code{time}}{\code{shiny::selectInput} used to choose the variable for the x axis}
 \item{\code{y1}}{\code{shiny::selectInput} used to choose the variable for the y1 axis}
 \item{\code{y2}}{\code{shiny::selectInput} used to choose the variable for the y2 axis}
}

The list \code{ui_view} will have members:

The function \code{server_model()} will be called from your server function.
Its arguments are:

\describe{
 \item{\code{input, output, session}}{input, output, session values passed from your server function}
 \item{\code{rctval_input, item_input}}{
   \code{shiny::reactiveValues} object, character string.
   \code{rctval_input[[item_input]]} is expected to be a vector with two integers: hours and minutes.
     In the future, the value will be a single integer - number of seconds. This will also serve as
     a way to impose a default value.
 }
}
}

